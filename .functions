#!/bin/bash

#----------- Python development----------------

black(){
	docker run --rm \
		--volume $(pwd):"/home/docker" \
		cytopia/black $*;
}

isort() {
	# Alipne version of python 3.9.4 with isort
	docker run --rm \
		--name isort \
		--volume $(pwd):"/home/docker" \
		abxsantos/isort:latest $*;
}

# flake8 type checker dev container
flake8() {
	# Alipne version of python 3.9.4 with flake8
	docker run --rm \
		--name flake8 \
		--volume $(pwd):"/home/docker" \
		abxsantos/flake8:latest $*;
}

# autoflake type checker dev container
autoflake() {
	# Alipne version of python 3.9.4 with autoflake
	docker run --rm \
		--name autoflake \
		--volume $(pwd):"/home/docker" \
		abxsantos/autoflake:latest $*;
}

#Python dev container
pydev() {
	# Slim version of python 3.9.1 a clean python environment
	docker run --rm -it \
		--name pydev \
		--volume $(pwd):"/home/docker" \
		abxsantos/pydev:latest /bin/bash;
}


#Interactive python container
ipython() {
	# Slim version of python 3.9.0  running iphython
	docker run --rm -it \
		--name iphython \
		--volume $(pwd):"/home/docker" \
		abxsantos/ipython:latest;
}

# Dockerized pylint
pylint(){
	docker run --rm \
			--disable-content-trust=true
			-v $(pwd):/data \
			 cytopia/pylint .;
}

# Dockerized mypy
mypy(){
	docker run --rm \
			--disable-content-trust=true 
			-v $(pwd):/data \
			 cytopia/mypy $*;
}

#-----------Applications---------------
keepass(){
 docker run -d \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /usr/share/X11/xkb:/usr/share/X11/xkb/:ro \
		-v $HOME/.config/keepassxc:/root/.config/keepassxc \
		-e DISPLAY=unix$DISPLAY \
		--disable-content-trust=true \
		 jess/keepassxc
}


# Lightbase terminal editor
nvim(){
	# $ vim file.txt
	docker run --rm -it \
	--volume $(pwd):/home/docker \
	abxsantos/nvim nvim $1
}


bat() {
        if [[ $# -eq 1 && $1 =~ ^\.\. ]]; then
                # handle ../../path when single arg
                docker run -it --rm \
										-e BAT_THEME \
										-e BAT_STYLE \
										-e BAT_TABS \
										-e PAGER \
										-v "$HOME/.config/bat/config:/root/.config/bat/config" \
										-v "$(cd "$(dirname "$1")"; pwd):/myapp"\
									 	danlynn/bat $(basename "$1")
        elif [[ $# -eq 1 && $1 =~ ^\/ ]]; then
                # handle ~/path -or- actual absolute paths when single arg
                docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -e PAGER -v "$HOME/.config/bat/config:/root/.config/bat/config" -v "$(dirname "$1"):/myapp" danlynn/bat $(basename "$1")
        else
                # handle most everything else
                docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -e PAGER -v "$HOME/.config/bat/config:/root/.config/bat/config" -v "$(pwd):/myapp" danlynn/bat $@
        fi
}

jq(){
	docker run --rm -i \
	stedolan/jq $1;
}

# Generate license files easily
license() {
	# https://github.com/lord63/choosealicense-cli
	# $ license -h
	# $ license generate mit >> LICENSE

	docker run --rm \
		-v "$(pwd):/workspace" \
		-v "${HOME}":/root \
		--disable-content-trust=true \
		 abxsantos/choosealicensecli \
		 license $1 $2 --fullname $3 --year $4 --email $5 --project $6
}

weeslack(){
	docker run -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		--disable-content-trust=true \
		 wee-slack
}

weget(){
	docker run --rm -it \
		--disable-content-trust=true \
			macgyverbass/we-get \
		--search $1
}

bpytop(){
	docker run --rm -it \
		--pid=host \
		--net=host \
		--disable-content-trust=true \
		-v bpytop:/root/.config/bpytop/ \
		 macgyverbass/bpytop
}

discord(){
	docker run -d --privileged \
	--name=discord \
	-v /tmp/.X11-unix:/tmp/.X11-unix \
	--device /dev/snd \
	-v discordSettings:/home/discord \
	-v /dev/shm:/dev/shm:z \
	-v /etc/localtime:/etc/localtime:ro \
	-v /var/run/dbus:/var/run/dbus \
	-v /var/run/user/$(id -u)/bus:/var/run/user/1000/bus \
	-e DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/user/1000/bus" \
	-v /var/run/user/$(id -u)/pulse:/var/run/user/1000/pulse \
	-e PULSE_SERVER="unix:/run/user/1000/pulse/native" \
	-e DISPLAY=unix$DISPLAY \
	--rm \
	--disable-content-trust=true \
	--group-add $(getent group audio | cut -d: -f3) \
	keyglitch/discord:stable
}

calibre(){
	docker run -d \
  	--name=calibre \
  	-e PUID=1000 \
  	-e PGID=1000 \
  	-e TZ=Europe/London \
  	-p 7070:8080 \
  	-p 7071:8081 \
  	-v /home/abxsantos/.config/calibre:/config \
    --disable-content-trust=true \
  	--restart unless-stopped \
  	ghcr.io/linuxserver/calibre:version-v5.7.0
		
		echo "Calibre available on port 7070"
}

sonarr(){
	docker run -d \
	--name=sonarr \
	-e PUID=1000 \
	-e PGID=1000 \
	-e TZ=Europe/London \
	-e UMASK_SET=022 `#optional` \
	-p 8989:8989 \
	-v /home/abxsantos/.config/sonarr:/config \
	-v /home/abxsantos/Torrents:/tv \
	-v /home/abxsantos/Torrents:/downloads \
	--disable-content-trust=true \
	--restart unless-stopped \
	--network="transmission-network" \
	ghcr.io/linuxserver/sonarr
}

radarr(){
	docker run -d \
	--name=radarr \
	-e PUID=1000 \
	-e PGID=1000 \
	-e TZ=Europe/London \
	-e UMASK_SET=022 `#optional` \
	-p 7878:7878 \
	-v /home/abxsantos/.config/radarr:/config \
	-v /home/abxsantos/Torrents:/movies \
	-v /home/abxsantos/Torrents:/downloads \
	-v /home/abxsantos/Torrents:/transmission/download \
	--disable-content-trust=true \
	--restart unless-stopped \
	--network="transmission-network" \
	
	ghcr.io/linuxserver/radarr
}

transmission(){
	docker run -d --name transmission \
		-v /home/abxsantos:/transmission/download \
		-p 9091:9091 -p 51413:51413 -p 51413:51413/udp \
		jess/transmission

	echo "Transmission available on port 9091"
}

# A code searching tool similar to ack, with a focus on speed.
ag() {
		# https://github.com/ggreer/the_silver_searcher
		# $ ag test_blah ~/code/
		docker run --rm \
			--disable-content-trust=true \
			-v $(pwd):/tmp \
       abxsantos/ag:latest $1 $2;
}

#Node dev container
node-docker() {
	# Slim version of python 3.9.1 with a clean python environment
	docker run --rm -it \
		--name nodejs \
		--volume $(pwd):"/home/docker" \
		abxsantos/nodejs:latest /bin/bash;
}

#-------------------------------------------------------------------------------------
# Simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		# add "0" for cases like ".5"
		# add "0" for cases like "-.5"
		# remove trailing zeros
		printf "%s" "$result" |
			sed -e 's/^\./0./'  \
			-e 's/^-\./-0./' \
			-e 's/0*$//;s/\.$//'
	else
		printf "%s" "$result"
	fi
	printf "\\n"
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${1%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${1}" || return 1

	size=$(
	stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
	stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	# shellcheck disable=SC2199
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}

# Use Git’s colored diff when available
if hash git &>/dev/null ; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
dataurl() {
	local mimeType
	mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
gitio() {
	if [ -z "${1}" ] || [ -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`"
		return 1
	fi
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
gz() {
	local origsize
	origsize=$(wc -c < "$1")
	local gzipsize
	gzipsize=$(gzip -c "$1" | wc -c)
	local ratio
	ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Query Wikipedia via console over DNS
mwiki() {
	dig +short txt "$*".wp.dg.cx
}

# UTF-8-encode a string of Unicode symbols
escape() {
	local args
	mapfile -t args < <(printf "%s" "$*" | xxd -p -c1 -u)
	printf "\\\\x%s" "${args[@]}"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Get a character’s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		xdg-open .	> /dev/null 2>&1
	else
		xdg-open "$@" > /dev/null 2>&1
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
	# Figure out github repo base URL
	local base_url
	base_url=$(git config --get remote.origin.url)
	base_url=${base_url%\.git} # remove .git from end of string

	# Fix git@github.com: URLs
	base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

	# Fix git://github.com URLS
	base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

	# Fix git@bitbucket.org: URLs
	base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

	# Fix git@gitlab.com: URLs
	base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

	# Validate that this folder is a git folder
	if ! git branch 2>/dev/null 1>&2 ; then
		echo "Not a git repo!"
		exit $?
	fi

	# Find current directory relative to .git parent
	full_path=$(pwd)
	git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
	relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

	# If filename argument is present, append it
	if [ "$1" ]; then
		relative_path="$relative_path/$1"
	fi

	# Figure out current git branch
	# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
	git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

	# Remove cruft from branchname
	branch=${git_where#refs\/heads\/}
	branch=${branch#remotes\/origin\/}

	[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
	url="$base_url/$tree/$branch$relative_path"


	echo "Calling $(type open) for $url"

	open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# Use feh to nicely view images
openimage() {
	local types='*.jpg *.JPG *.png *.PNG *.gif *.GIF *.jpeg *.JPEG'

	cd "$(dirname "$1")" || exit
	local file
	file=$(basename "$1")

	feh -q "$types" --auto-zoom \
		--sort filename --borderless \
		--scale-down --draw-filename \
		--image-bg black \
		--start-at "$file"
}

# get dbus session
dbs() {
	local t=$1
	if [[  -z "$t" ]]; then
		local t="session"
	fi

	dbus-send --$t --dest=org.freedesktop.DBus \
		--type=method_call	--print-reply \
		/org/freedesktop/DBus org.freedesktop.DBus.ListNames
}

# check if uri is up
isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

# build go static binary from root of project
gostatic(){
	local dir=$1
	local arg=$2

	if [[ -z $dir ]]; then
		dir=$(pwd)
	fi

	local name
	name=$(basename "$dir")
	(
	cd "$dir" || exit
	export GOOS=linux
	echo "Building static binary for $name in $dir"

	case $arg in
		"netgo")
			set -x
			go build -a \
				-tags 'netgo static_build' \
				-installsuffix netgo \
				-ldflags "-w" \
				-o "$name" .
			;;
		"cgo")
			set -x
			CGO_ENABLED=1 go build -a \
				-tags 'cgo static_build' \
				-ldflags "-w -extldflags -static" \
				-o "$name" .
			;;
		*)
			set -x
			CGO_ENABLED=0 go build -a \
				-installsuffix cgo \
				-ldflags "-w" \
				-o "$name" .
			;;
	esac
	)
}

# go to a folder easily in your gopath
gogo(){
	local d=$1

	if [[ -z $d ]]; then
		echo "You need to specify a project name."
		return 1
	fi

	if [[ "$d" == github* ]]; then
		d=$(echo "$d" | sed 's/.*\///')
	fi
	d=${d%/}

	# search for the project dir in the GOPATH
	mapfile -t path < <(find "${GOPATH}/src" \( -type d -o -type l \) -iname "$d"  | awk '{print length, $0;}' | sort -n | awk '{print $2}')

	if [ "${path[0]}" == "" ] || [ "${path[*]}" == "" ]; then
		echo "Could not find a directory named $d in $GOPATH"
		echo "Maybe you need to 'go get' it ;)"
		return 1
	fi

	# enter the first path found
	cd "${path[0]}" || return 1
}

golistdeps(){
	(
	if [[ -n "$1" ]]; then
		gogo "$@"
	fi

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

# get the name of a x window
xname(){
	local window_id=$1

	if [[ -z $window_id ]]; then
		echo "Please specifiy a window id, you find this with 'xwininfo'"

		return 1
	fi

	local match_string='".*"'
	local match_qstring='"[^"\\]*(\\.[^"\\]*)*"' # NOTE: Adds 1 backreference

	# get the name
	xprop -id "$window_id" | \
		sed -nr \
		-e "s/^WM_CLASS\\(STRING\\) = ($match_qstring), ($match_qstring)$/instance=\\1\\nclass=\\3/p" \
		-e "s/^WM_WINDOW_ROLE\\(STRING\\) = ($match_qstring)$/window_role=\\1/p" \
		-e "/^WM_NAME\\(STRING\\) = ($match_string)$/{s//title=\\1/; h}" \
		-e "/^_NET_WM_NAME\\(UTF8_STRING\\) = ($match_qstring)$/{s//title=\\1/; h}" \
		-e "\${g; p}"
}

govendorcheck() {
	# shellcheck disable=SC2046
	vendorcheck -u ./... | awk '{print $NF}' | sed -e "s#^github.com/jessfraz/$(basename $(pwd))/##"
}

restart_gpgagent(){
	# Restart the gpg agent.
	echo "Restarting gpg-agent and scdaemon..."
	echo -e "\tgpg-agent: $(pgrep gpg-agent) | scdaemon: $(pgrep scdaemon)"

	echo "Killing processes..."
	# shellcheck disable=SC2046
	kill -9 $(pgrep scdaemon) $(pgrep gpg-agent) >/dev/null 2>&1
	echo -e "\tgpg-agent: $(pgrep gpg-agent) | scdaemon: $(pgrep scdaemon)"

	gpgconf --reload gpg-agent
	gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1

	echo "Restarted gpg-agent and scdaemon..."
}

gitsetoriginnopush() {
	git remote set-url --push origin no_push
}

b64(){
	echo -n "${1}" | base64 $2
}

